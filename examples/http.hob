import "libc/lib.hob" as c;

use c::io;
use c::process;
use c::socket;

fun panic(s: *u8): void {
    io::puts(s);
}

fun main(): i32 {
    var sock = socket::new(2, 1, 0);
    if sock == 0 - 1 {
        panic("cannot create a socket\0");
        return 1;
    }
    defer io::close(sock);
    var server_address: socket::AddressIn;
    server_address.family = 2;
    server_address.port = 7968;
    server_address.in_addr = 0;
    server_address._reserved = 0;
    # TODO: consts
    # SO_REUSEPORT

    var reuse: i32 = 1;
    if socket::set_options(sock, 1, 2, @reuse as *socket::OptionValue, 4) == 0 - 1 {
        panic("failed to set socket options\0");
        return 1;
    }

    if socket::bind(sock, @server_address, 16) == 0 - 1 {
        panic("cannot bind a socket\0");
        return 1;
    }
    if socket::listen(sock, 1) == 0 - 1 {
        panic("cannot listen a socket\0");
        return 1;
    }

    var client_address: socket::AddressIn;
    var client_addr_size: u64 = 16;
    var client_socket = socket::accept(sock, @client_address, @client_addr_size);
    if client_socket == 0 - 1 {
        panic("cannot accept a socket\0");
        return 1;
    }
    defer io::close(client_socket);
    io::write(client_socket, "hello\n", 6);

    return 0;
}