import "std/process.hob" as process;
import "std/io.hob" as io;

behaviour BasicMath {
    fun (Self) add(other: Self) -> Self
    fun (Self) sub(other: Self) -> Self
}

behaviour Printable {
    fun (Self) print() -> void
}

fun (i64) add(other: i64) -> i64 { return self + other; }
fun (i64) sub(other: i64) -> i64 { return self - other; }

fun (i8) print() -> void { io.print_i32(self as _); }
fun (i16) print() -> void { io.print_i32(self as _); }
fun (i32) print() -> void { io.print_i32(self as _); }
fun (i64) print() -> void { io.print_i32(self as _); }
fun ([]u8) print() -> void { io.print(self); }
fun (bool) print() -> void { if self { io.print("true"); } else { io.print("false"); } }

fun println<T: Printable>(t: T) -> void {
    t.print();
    io.println("");
}

fun print_sum_sub<T: BasicMath + Printable>(a: T, b: T) -> T {
    final res = a.add(b).sub(b);
    res.print();
    io.println("");
    return res;
}

struct Asd {
    a: i32,
    b: i64,
    c: bool
}

fun (Asd) print() -> void {
    io.print("struct Ast { a: ");
    self.a.print();
    io.print(", b: ");
    self.b.print();
    io.print(", c: ");
    self.c.print();
    io.print(" }");
}

fun main() -> i32 {
    final i: i64 = print_sum_sub.<i64>(123, 345);
    println.<Asd>(struct Asd {
        a: 1,
        b: 2,
        c: true
    });
    println.<[]u8>("hello, world!");
    println.<i8>(1 as i8);
    println.<i16>(2 as i16);
    println.<i32>(3 as i32);
    println.<i64>(4 as i64);
    return 0;
}

fun _start() -> void {
    process.exit(main());
}
