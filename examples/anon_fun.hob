import "std/process.hob" as process;
import "std/io.hob" as io;

fun (*usize) apply(f: fun (usize) -> usize) -> *usize {
    self.* = f(self.*);
    return self;
}

fun main() -> i32 {
    var arr = {
        fun (x: i32) -> i32 { return x; },
        fun (x: i32) -> i32 { return 2 * x; },
        fun (x: i32) -> i32 { return x * x; },
        fun (x: i32) -> i32 { return -x; }
    };
    var i: usize = 0;
    while i < arr.length {
        io.print_i32(arr[i](3));
        io.print("\n");
        i.apply(fun (v: usize) -> usize {
            return v + 1;
        }).apply(fun (v: usize) -> usize {
            return v;
        });
    }
    return 0;
}

fun _start() -> void {
    process.exit(main());
}
