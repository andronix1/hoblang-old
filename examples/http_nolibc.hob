import "std/process.hob" as process;
import "std/tcp.hob" as tcp;
import "std/io.hob" as io;
import "std/fs.hob" as fs;

fun main() -> i32 {
	var filename = "test.html\0";
	var file = fs::open_read(filename);
	if file < 0 {
		io::println("cannot open file `test.hml`");
		return 1;
	}

	var server = tcp::bind(8080, 16);
	if server < 0 {
		io::println("cannot bind a socket :(");
		return 1;
	}
	var buf: [5]u8;
	while true {
		var client = tcp::accept(server);
		io::println("yay, new connection!");
		if client < 0 {
			io::println("cannot accept a socket :(");
		} else {
			var buf_slice = (&buf) as []u8;
			while io::read_from(client, &buf_slice) == 5 {
				io::print(buf_slice);
			}
			io::write_to(client, "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n");
			io::full_forward(file, client);
			tcp::close(client);
			io::println("wow, closed the connection!");
		}
	}
	return 0;
}

fun _start() -> void {
	process::exit(main());
}
