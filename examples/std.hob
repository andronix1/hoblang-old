import "libc.hob" as libc;

fun get_int(): i32 {
	var res: i32 = 0;
	var c: u8 = libc::get_char();
	while c != '\n' {
		if c < '0' || c > '9' {
			panic("invalid character!\0");
		}
		res = res * 10 + (c - '0') as i32;
		c = libc::get_char();
	}
	return res;
}

fun put_int(val: i32): void {
	if (val < 0) {
		val = 0 - val; # TODO: unary
		libc::put_char('-');
	}
	if (val == 0) {
		libc::put_char('0');
		return;
	}
	var buf: *u8 = "\0\0\0\0\0\0\0\0\0\0\0\0";
	var len = 13;
	var i = 0;
	while val > 0 {
		buf[len - i - 1] = '0' + (val - (val / 10 * 10)) as u8;
		i = i + 1;
		val = val / 10;
	}
	libc::printf(@buf[len - i]);
}

fun put_cstr(cstr: *u8): void {
	var i = 0;
	while cstr[i] != '\0' {
		libc::put_char(cstr[i]);
		i = i + 1;
	}
}

fun panic(cstr: *u8): void {
	put_cstr(cstr);
	libc::exit(1);
}
