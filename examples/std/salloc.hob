import "mem.hob" as mem;

use mem::Page;

fun page_to_ptr(page: *Page) -> *void {
    if mem::is_page_invalid(page) {
        return 0 as *void;
    }
    (page.*.ptr as *u32).* = page.*.size;
    return (page.*.ptr as i64 + 4) as *void;
}

fun page_from_ptr(src: *void) -> Page {
    var page_ptr = (src as i64 - 4) as *void;
    var size = (page_ptr as *u32).*;
    var page: Page;
    page.ptr = page_ptr;
    page.size = size + 4;
    return page;
}

fun allocate(size: u32) -> *void {
    var page = mem::pages_alloc(size + 4);
    return page_to_ptr(&page);
}

fun reallocate(ptr: *void, size: u32) -> *void {
    var old_page = page_from_ptr(ptr);
    var new_page = mem::pages_realloc(&old_page, size + 4);
    return page_to_ptr(&new_page);
}

fun free(ptr: *void) -> bool {
    var page = page_from_ptr(ptr);
    return mem::page_free(&page);
}
