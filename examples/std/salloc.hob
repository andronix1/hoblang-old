import "mem.hob" as mem;

use mem::Page;

fun allocate(size: u32) -> *void {
    var page = mem::pages_alloc(size + (4 as u32));
    var result = page.ptr;
    if result as i64 == 0 {
        return 0 as i64 as *void;
    }
    var ptr = result as *u32; # TODO: expr is not a pointer like alloca
    ptr.* = size;
    return (result as i64 + (4 as i64)) as *void;
}

fun page_from_ptr(src: *void) -> Page {
    var page_ptr = (src as i64 - (4 as i64)) as *void;
    var ptr = page_ptr as *u32;
    var size = ptr.*;
    var page: Page;
    page.ptr = page_ptr;
    page.size = size + (4 as u32);
    return page;
}

fun reallocate(src: *void, size: u32) -> *void {
    var old_page = page_from_ptr(src);
    var result = allocate(old_page.size);
    if result == 0 as i64 as *void {
        return 0 as i64 as *void;
    }
    # mem::copy(src, result, old_page.size); # TODO: SEGFAULT ON MEMCPY
    mem::page_free(&old_page);
    return result;
}

fun free(ptr: *void) -> void {
    var page = page_from_ptr(ptr);
    mem::page_free(&page);
}
