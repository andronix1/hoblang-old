import "linux/io.hob" as io;

const FD_STDOUT: io::Fd = io::FD_STDOUT;

fun fd_remains(fd: io::Fd) -> i64 {
    var pos = io::lseek(fd, 0, io::SEEK_CUR);
    var end_pos = io::lseek(fd, 0, io::SEEK_END);
    io::lseek(fd, pos, io::SEEK_SET);
    return end_pos - pos;
}

fun full_forward(from: io::Fd, to: io::Fd) -> void {
    var offset = 0 as i64;
    io::lseek(from, 0, io::SEEK_SET);
    io::sendfile(to, from, &offset, fd_remains(from));
}

fun write_to(fd: io::Fd, str: []u8) -> void {
    io::write(fd, str.raw, str.length as i64);
}

fun read_from(fd: io::Fd, output: *[]u8) -> i64 {
    return io::read(fd, output.*.raw, output.*.length as i64);
}

fun close(fd: io::Fd) -> void {
    io::close(fd);
}

fun print(str: []u8) -> void {
    write_to(io::FD_STDOUT, str);
}

fun print_char(char: u8) -> void {
    io::write(io::FD_STDOUT, &char, 1);
}

fun println(str: []u8) -> void {
    print(str);
    print("\n");
}

fun print_i32(value: i32) -> void {
    if value < 0 {
        print_char('-');
        value = -value;
    }
    print_u64(value as u64);
}

fun print_u64(val: u64) -> void {
    const BUF_SIZE: usize = 32;

    var i: usize = 0;
    var buf: [BUF_SIZE]u8;
    while val != 0 {
        buf[BUF_SIZE - i - 1] = '0' + (val % 10) as u8;
        val /= 10;
        i += 1;
    }
    var slice = &buf as []u8;
    slice.raw = (&buf as usize + BUF_SIZE - i) as *u8;
    slice.length = i;
    print(slice);
}

fun hex_dump_4b(hb: u8) -> void {
    if hb < 10 {
        print_char(hb + '0');
    } else {
        print_char(hb - 10 + 'a');
    }
}

fun hex_dump(mem: []u8) -> void {
    var i: usize = 0;
    while i < mem.length {
        var char = mem[i];
        hex_dump_4b(char & 0xf0 >> 4);
        hex_dump_4b(char & 0xf);
        i = i + 1;
    }
}

fun print_f64(value: f64) -> void {
    var int = value as u64;
    print_u64(int);
    print_char('.');
    var fp = ((value - int as f64) * 10000000.0) as u64;
    while fp % 10 == 0 {
        fp = fp / 10;
    }
    print_u64(fp);
}

fun get_char() -> u8 {
    var res: u8;
    if io::read(io::FD_STDIN, &res, 1) != 1 {
        return '!';
    }
    return res;
}
