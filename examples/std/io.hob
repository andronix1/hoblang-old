import "linux/io.hob" as io;

const FD_STDOUT: io::Fd = io::FD_STDOUT;

fun fd_remains(fd: io::Fd) -> i64 {
    var pos = io::lseek(fd, 0, io::SEEK_CUR);
    var end_pos = io::lseek(fd, 0, io::SEEK_END);
    io::lseek(fd, pos, io::SEEK_SET);
    return end_pos - pos;
}

fun full_forward(from: io::Fd, to: io::Fd) -> void {
    var offset = 0 as i64;
    io::lseek(from, 0, io::SEEK_SET);
    io::sendfile(to, from, &offset, fd_remains(from));
}

fun write_to(fd: io::Fd, str: []u8) -> void {
    io::write(fd, str.raw, str.length as i64);
}

fun read_from(fd: io::Fd, output: *[]u8) -> i64 {
    return io::read(fd, output.*.raw, output.*.length as i64);
}

fun close(fd: io::Fd) -> void {
    io::close(fd);
}

fun print(str: []u8) -> void {
    write_to(io::FD_STDOUT, str);
}

fun print_char(char: u8) -> void {
    io::write(io::FD_STDOUT, &char, 1);
}

fun println(str: []u8) -> void {
    print(str);
    print("\n");
}

const PRINT_U64_BUF_SIZE: i32 = 32;

fun print_u64(value: u64) -> void {
    var buf: [PRINT_U64_BUF_SIZE]u8;
    var buf_slice = &buf as []u8;

    var i = PRINT_U64_BUF_SIZE - 1;
    
    if value == 0 {
        buf_slice[i] = '0';
        i = i - 1;
    }

    while value > 0 {
        buf_slice[i] = '0' + (value - (value / 10 as u64) * 10 as u64) as u8;
        i = i - 1;
        value = value / 10;
    }
    buf_slice.raw = (buf_slice.raw as i64 + i as i64 + 1) as *u8;
    buf_slice.length = buf_slice.length - i - 1;
    print(buf_slice);
}

fun get_char() -> u8 {
    var res: u8;
    if io::read(io::FD_STDIN, &res, 1) != 1 {
        return '!';
    }
    return res;
}
