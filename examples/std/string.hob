import "salloc.hob" as salloc;
import "io.hob" as io;
import "fs.hob" as fs;

struct String {
    buffer: []u8,
    cap: i32
}

fun new() -> String {
    var result: String;
    result.buffer.length = 0;
    result.cap = 0;
    return result;
}

fun with_cap(cap: i32) -> String {
    var result = new();
    result.reserve(cap);
    return result;
}

fun from_slice(slice: []u8) -> String {
    var result = with_cap(slice.length);
    result.append_slice(slice);
    return result;
}

fun(*String) reserve(cap: i32) -> void {
    if self.*.cap >= cap {
        return;
    }
    if self.*.cap == 0 {
        self.*.buffer.raw = salloc::allocate(cap as u32) as *u8;
    } else {
        self.*.buffer.raw = salloc::reallocate(self.*.buffer.raw as *void, cap as u32) as *u8;
    }
    self.*.cap = cap;
}

fun(String) length() -> i32 {
    return self.buffer.length;
}

fun(String) calc_cap(requires: i32) -> i32 {
    var new_cap = self.cap * 2;
    if requires >= new_cap {
        new_cap = requires;
    }
    return new_cap;
}

fun(*String) maybe_extend(requires: i32) -> void {
    if requires > self.*.cap {
        self.*.reserve(self.*.calc_cap(self.*.length() + 1));
    }
}

fun(*String) push(char: u8) -> void {
    self.*.maybe_extend(self.*.length() + 1);
    self.*.buffer[self.*.length()] = char;
    self.*.buffer.length = self.*.length() + 1;
}

fun(*String) append_slice(slice: []u8) -> void {
    var i = 0;
    self.*.maybe_extend(self.*.length() + slice.length);
    while i < slice.length {
        self.*.push(slice[i]);
        i = i + 1;
    }
}

fun(*String) append(other: *String) -> void {
    self.*.append_slice(other.*.buffer);
}

const READ_FROM_BUFFER_SIZE: i32 = 64;

fun(*String) append_fd(fd: fs::File) -> void {
    var buf: [READ_FROM_BUFFER_SIZE]u8;
    while true {
        var buf_slice = &buf as []u8;
        buf_slice.length = io::read_from(fd, &buf_slice) as i32;
        self.*.append_slice(buf_slice);
        if buf_slice.length != READ_FROM_BUFFER_SIZE {
            break;
        }
    }
}

fun(String) free() -> void {
    if self.cap != 0 {
        salloc::free(self.buffer.raw as *void);
    }
}

fun(String) print() -> void {
    io::print(self.buffer);
}
