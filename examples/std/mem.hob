import "linux/mem.hob" as mem;
import "io.hob" as io;

struct Page {
    ptr: *void,
    size: usize 
}

fun is_page_invalid(page: *Page) -> bool {
    return page.*.ptr == null;
}

fun pages_alloc(size: usize) -> Page {
    var page: Page;
    page.ptr = mem::mmap(null, size as i64, mem::PROT_READ | mem::PROT_WRITE, mem::MAP_ANON | mem::MAP_SHARED, -1, 0);
    page.size = size;
    return page;
}

fun pages_realloc(page: *Page, size: usize) -> Page {
    var new_page: Page;
    new_page.ptr = mem::mremap(page.*.ptr, page.*.size as i64, size as i64, mem::MREMAP_MAYMOVE) as *void;
    new_page.size = size;
    return new_page;
}

fun page_free(page: *Page) -> bool {
    return mem::munmap(page.*.ptr, page.*.size as i64) == 0;
}

fun copy(src: *void, dst: *void, size: usize) -> void {
    var end = src as i64 + size as i64;
    while src as i64 < end {
        (src as *u8).* = (dst as *u8).*;
        src = (src as i64 + 1) as *void;
    }
}
