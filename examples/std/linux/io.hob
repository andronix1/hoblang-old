import "syscall.hob" as syscall;

public type Fd = i32;

public fun write(fd: Fd, buf: *u8, len: i64) ->i64 {
	return syscall.arg3(syscall.WRITE, fd as i64, buf as i64, len);
}

public fun read(fd: Fd, buf: *u8, len: i64) -> i64 {
	return syscall.arg3(syscall.READ, fd as i64, buf as i64, len);
}

public const FCNTL_SET_FLAG: i64 = 4;
public const O_NONBLOCK: i64 = 00004000;

public fun fcntl_set_flag(fd: Fd, flags: i64) -> i64 {
	return syscall.arg3(syscall.FCNTL, fd as i64, FCNTL_SET_FLAG, flags);
}

public fun open(filename: *u8, flags: i64, mode: i64) ->Fd {
	return syscall.arg3(syscall.OPEN, filename as i64, flags, mode) as Fd;
}

public fun close(fd: Fd) ->i64 {
	return syscall.arg1(syscall.CLOSE, fd as i64);
}

public fun sendfile(to: Fd, input: Fd, offset: *i64, len: i64) ->i64 {
	return syscall.arg4(syscall.SENDFILE, to as i64, input as i64, offset as i64, len);
}

public fun lseek(fd: Fd, offset: i64, whence: i64) ->i64 {
	return syscall.arg3(syscall.SEEK, fd as i64, offset as i64, whence);
}

public const SEEK_END: i64 = 2;
public const SEEK_CUR: i64 = 1;
public const SEEK_SET: i64 = 0;

public const FD_STDIN: Fd = 0;
public const FD_STDOUT: Fd = 1;
